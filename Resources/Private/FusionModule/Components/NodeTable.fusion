prototype(Shel.Neos.Orphanage:Component.NodeTable) < prototype(Neos.Fusion:Component) {
    @propTypes {
        @strict = true
        totalOrphanNodes = ${PropTypes.integer}
        orphanNodes = ${PropTypes.arrayOf(PropTypes.dataStructure({'identifier': PropTypes.string, 'path': PropTypes.string, 'nodeType': PropTypes.string, 'workspace': PropTypes.string, 'childNodes': PropTypes.integer}))}
    }

    totalOrphanNodes = 0
    orphanNodes = ${[]}

    renderer = afx`
        <section id='results' hx-swap-oob='true'>
            <br />
            <p>
                <Shel.Neos.Orphanage:Component.ResultsCount count={props.totalOrphanNodes} />
                {' '}orphaned nodes found that match the filter.
            </p>
            <table class='neos-table'>
                <thead>
                <tr>
                    <th>Path</th>
                    <th>Workspace</th>
                    <th>NodeType</th>
                    <th>Descendant nodes</th>
                    <th>Actions</th>
                </tr>
                </thead>
                <tbody>
                <Neos.Fusion:Loop items={props.orphanNodes} itemName='orphanNode'>
                    <Shel.Neos.Orphanage:Component.NodeTable.Row
                        orphanNode={orphanNode}
                        createNewPopoverId={props.createNewPopoverId}
                    />
                </Neos.Fusion:Loop>
                </tbody>
            </table>
        </section>
    `
}
